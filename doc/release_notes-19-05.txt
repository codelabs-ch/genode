

              ===============================================
              Release notes for the Genode OS Framework 19.05
              ===============================================

                               Genode Labs



; intro
; @nfeske


Kernel-agnostic virtual-machine monitors
########################################

Since the introduction of the
[https://genode.org/documentation/release-notes/17.02#Genode_Application_Binary_Interface - Genode Application Binary Interface]
in the 17.02 release,
Genode components can be assembled once for a given hardware platform and
executed without further adjustments on all the supported kernels.
However, at that time, the supported virtual machine monitors - a port of
VirtualBox 4 & 5, Seoul and our
[https://genode.org/documentation/articles/arm_virtualization - custom VMM] -
stayed kernel specific.

Of course, last remaining bastions tempt to be taken! So last year, we started
the venture to unify our virtualization interface across kernels. Starting point
was the already existing Genode VM interface of our custom VMM on ARM. We took
it and extended the interface with caution to the x86 world. Having an eye
on the requirements of our already supported VMMs on NOVA(x86), namely
VirtualBox and Seoul, the VM interface got extended with missing features like
multiple vCPU support and specific VM handlers per vCPU.

In parallel, we started to investigate the other x86 microkernels with regard to
hardware-assisted virtualization features available, namely seL4 and Fiasco.OC.
Over several weeks, we iteratively extended the interface. On the one hand
familiarizing us with the kernel interfaces of seL4 & Fiasco.OC, on the other hand
considering known requirements of the NOVA microhypervisor and additionally
keeping our custom VMM for ARM still compatible with the new VM interface.

During this time, it became apparent that the control flow on a VM resume/pause
and a VM event(exit) are different between seL4/Fiasco.OC and NOVA/base-hw.
For seL4 and Fiasco.OC a VM is resumed by making a blocking syscall on the
kernel. On a VM event, the blocking syscall will return. Logically, on both
kernels the VMMs 'calls' into the VM.
On base-hw and NOVA, it is the way around. Whenever a VM causes a VM event,
the kernels setup either an asynchronous notification (base-hw) or a synchronous
IPC call (NOVA) to the VMM. In both cases the VMM will run a prior registered
VM event handler.
Upon return of the VM event handler, the VM can be resumed. Logically, on
NOVA and base-hw the VM 'calls' into the VMM. The following two figures
contrast the different flows of control between a user-level virtual machine
monitor and the respective kernels.

[image vm_seq_foc_sel4]
  Control flow of handling virtualization events on Fiasco.OC and seL4

[image vm_seq_nova_hw]
  Control flow of handling virtualization events on NOVA and the base-hw kernel

Hiding this differences behind a common VM interface was the challenge we were
faced, accepted and managed. Finally, at one point in December we had all 3
x86 kernels running with a test VMM - without re-compilation. The toy VMM
(vmm_x86.run) runs multiple vCPUs on multiple physical CPUs and tests several
VM events/exits already.

After this major breakthrough, we spent the left days before Christmas to
adjust the Seoul VMM to the new VM interface, breaking it free of the
kernel-specific NOVA embracing. The choice to start with Seoul stems from the
fact that it is - compared to VirtualBox - much smaller and therefore easier to
debug if things are wrong in the beginning. After one week, the Seoul VMM
became in principle kernel independent and revived on NOVA, and after some
more days, it started to hobble on seL4 and Fiasco.OC.

With the New Year, VirtualBox was the next target where all NOVA kernel
specific calls have been replaced with the new Genode VM interface. Mid of
January, the work showed first results by having a prototype running simple
VMs on NOVA again. At this point, it became apparent that this venture is not
anymore an adventure. All the findings and technical details so far got condensed to a
[https://fosdem.org/2019/schedule/event/microkernel_virtualization - presentation]
given and recorded at the [https://fosdem.org/2019 - FOSDEM 2019] in Brussels
in February in the
[https://fosdem.org/2019/schedule/track/microkernels_and_component_based_os - Microkernel and Component based OS]
developer room.

At this point, we started transforming our prototype for the 4 kernels
into a clean solution to be featured in Genode 19.05. Eventually, the
kernel-agnostic Seoul VMM runnable on seL4, Fiasco.OC, and NOVA entered
Genode master. In the Genodians article
[http://www.genodians.org/alex-ab/2019-05-09-seoul-vmm - Seoul VMM and the new
VM interface],
we conserved the current state and a few performance measurements.

Short before this release, the kernel-agnostic VirtualBox VMM version on
Genode/NOVA got ready. The kernel-agnostic version is in principle capable to
run Linux VMs and Windows 7/10 VMs on Genode/NOVA. Currently, this version must
still be considered as experimental and does not run on Genode/seL4 or Genode/Fiasco.OC.

Because of the experimental nature of the kernel-agnostic VirtualBox VMM version,
we decided to keep the kernel-specific version for NOVA at the moment. This
gives us time to test and improve the kernel-agnostic version. It also allows
us to compare both versions to each other.
If time and interest permits, we will consider bringing the virtualization
support on Genode/seL4 and Genode/Fiasco.OC on par with Genode/NOVA.

When building VirtualBox with Genode 19.05,
you will find both the 'virtualbox5-nova' and the new 'virtualbox5' binaries
in the build directory. The former relies on NOVA's kernel interface whereas
the latter uses Genode's kernel-agnostic VM interface.
Nightly tested run scenarios with the new VM interface are named
'vbox5_vm*.run' and can be found in the 'repos/ports/run' folder.


Broadened CPU architecture support and updated tool chain
#########################################################

With the major update of Genode's tool chain and library infrastructure in
tandem, the framework gains a consistent architecture support across
x86-32, x86-64, ARM-32, RISC-V, and the new added AARCH64. This includes
the tool chain (Section [Tool chain based on GCC-8.3.0 and binutils 2.32]),
the base framework, the dynamic linker,
and the C runtime (Section [Updated dynamic linker and C runtime]).

Together with this update, we took the chance to wrap up our long-time move
away from board-specific build directories to one generic build directory
shared by multiple kernels and boards for a given CPU architecture
(Section [Unified build directories for ARM]).


Tool chain based on GCC-8.3.0 and binutils 2.32
===============================================

Genode uses a tailored tool chain based on GCC and binutils that is used
across all supported kernels and architectures.
Since the previous tool-chain update in version
[https://genode.org/documentation/release-notes/17.05#Tool_chain - 17.05],
we relied GCC-6.3. After two years, it was time for an update, motivated
by three major reasons.
First, the C++17 standard is common-place now. We Genode developers anticipate
the improvements that come with it.
Second, RISC-V and AARCH64 are now supported by mainline GCC. Up till now,
we had to maintain a custom patch set for Genode's RISC-V support. AARCH64
was not supported yet.
Third, our increasing engagement with SPARK depends on recent improvements
of the Ada compiler that is part of GCC.

With Genode 19.05, the tool chain is now based on binutils version 2.32, GCC
version 8.3.0, GDB version 8.2.1, gcov version 8.3.0, standard C++ library
version 8.3.0.

The tool chain supports x86 (32 and 64 bit), ARM, AARCH64, and RISC-V.

For C++ code, the C++17 standard is enabled by default.

The update of the tool chain presented a perfect opportunity to replace the
former use of gnatmake with a much more natural integration of Ada in Genode's
build system, using a custom ali2dep dependency-extraction tool developed
by [https://github.com/Componolit/ali2dep - Componolit].

In contrast to the previous versions, we switched to versioned installation
directory for the new tool chain. By default, it is now installed to
_/usr/local/genode/tool/19.05/_. This eases the use of different
tool-chain versions for different development branches.

:Tool-chain installation:

  [https://genode.org/download/tool-chain]

Caveats
-------

The tool-chain update required a number of adaptations throughout the
source tree, and may affect Genode users too:

* The silent fall-though within switch statements most now be replaced
  by an explicit annotation of the form
  ! [[fallthrough]]
* The 'register' keyword is no longer valid with C++17. Hence, it must
  be removed from the code.
* Types marked as 'Noncopyable' can no longer have an implicit default
  constructor. A default constructor must be provided manually.


Updated dynamic linker and C runtime
====================================

The tool-chain update is accompanied with a major update of the dynamic linker
and the C runtime to cover both the AARCH64 and RISC-V architectures in
addition to the traditional x86 and ARM architectures.


Updated C runtime to FreeBSD 12 libc
------------------------------------

FreeBSD 12 supports AARCH64 and RISC-V. Hence, by updating our C runtime,
Genode's libc support extends to those architectures now.


Lazy-binding support for RISC-V
-------------------------------

Until now, Genode's dynamic linker supported only the eager binding of
symbols at loading time on the RISC-V architecture. With the current version,
we could overcome this limitation in favor of lazy binding as used on all
other CPU architectures.


Unified build directories for ARM
=================================

In version
[https://genode.org/documentation/release-notes/17.02#Genode_Application_Binary_Interface - 17.02],
we introduced unified build directories x86, which allow us to build and
run Genode scenarios on various kernels while using only one build directory.
This concept leverages Genode's cross-kernel-binary compatibility to make
the switch from one kernel to another - like developing on base-linux and
deploying on base-nova - a seamless experience.

On ARM, this concept was held back by a third dimension. The
system-integration step does not only depend of the CPU architecture and
the kernel but also on the used board. Our traditional approach was the
use of one build directory per board. Granted, within such a build directory,
one can easily switch between different kernels - like Fiasco.OC and seL4.
But on ARM, we find an extreme proliferation of different board
configurations, which share the same CPU architecture but demand different
integration steps. This ensues large redundancies among different build
directories. Switching from one board to another - even if must binaries
happen to be exactly the same - requires an additional rebuilding effort.

With version 19.05, we took the chance to generalize the unified build
directory concept to the support of multiple boards per build directory,
greatly reducing the friction when switching kernels and boards for a given
architecture revision (like ARMv7a). This change has the following
implications:

* Drivers no longer depend on the SPEC values as configured for a build
  directory.

* All *binaries* are now *named unambiguously*. For example, the USB drivers
  for the Panda (OMAP) and Arndale (Exynos) boards where formerly called
  'usb_drv' but were different programs. They just never happened to
  appear in the same build directory. In the new version, they are named
  'panda_usb_drv' and 'arndale_usb_drv' respectively and can thereby
  happily co-exist within the same 'armv7a' build directory.

  Note that this binary renaming will likely effect existing run scripts.

* Include paths no longer hide the board details, which makes the included
  code much more easy to follow.

* Run scripts need to pick the right binary, depending on the used board.
  Since the board is no longer tied to a build directory, the selection
  of the used board has become a build-time variable 'BOARD' following
  the successful pattern of how we specify the targeted 'KERNEL'.

To avoid the pollution of run scripts with difficult conditions, we wrap
drivers needed for a particular board and use case into so-called
_drivers_ packages. Such a package can be instantiated within a generic
scenario using a nested init instance. The details about the drivers and
how they access the hardware remain nicely hidden inside this building block.

Currently, there exist _drivers_ packages for two distinct use cases:

:drivers-interactive pkgs: contain all drivers needed for simple
  interactive scenarios, including graphical output and user input.

:drivers-net pkgs: contain the drivers needed for communication over the
  network.

Whenever a run script fits one of these use cases, it can rely on the
corresponding ready-to-use drivers packages via:

! import_from_depot [depot_user]/src/[base_src] \
!                   [depot_user]/pkg/[drivers_nic_pkg] \
!                   ...

With the drivers package incorporated, the drivers subsystem can be
instantiated as follows (note the absence of any board or kernel-specific
details):

! <start name="drivers" caps="1000">
!   <resource name="RAM" quantum="32M" constrain_phys="yes"/>
!   <binary name="init"/>
!   <route>
!     <service name="ROM" label="config">
!       <parent label="drivers.config"/> </service>
!     <service name="Timer"> <child name="timer"/> </service>
!     <any-service> <parent/> </any-service>
!   </route>
!   <provides> <service name="Nic"/> </provides>
! </start>


Using the 'BOARD' build variable
--------------------------------

The new 'BOARD' variable selects the board to use. It can be specified
either as a 'make' command line argument (or environment variable), or
defined in the build-directory configuration (_etc/build.conf_).
The following boards are available:

:arm_v6: rpi
:arm_v7: arndale, imx53_qsb, imx53_qsb_tz, imx6q_sabrelite, imx7d_sabre,
  nit6_solox, odroid_x2, odroid_xu, panda, pbxa9, usb_armory,
  wand_quad, zynq_qemu
:x86_64: pc, linux, muen
:x86_32: pc, linux
:riscv:  spike


New revision of the Genode Foundations book
###########################################

The "Genode Foundations" book received its annual update, which is actually
rather a refinement than a revision. The noteworthy additions and changes are:

: <div class="visualClear"><!-- --></div>
: <p>
:  <div style="clear: both; float: left; margin-right:20px;">
:   <a class="internal-link" href="https://genode.org">
:    <img class="image-inline" src="https://genode.org/documentation/genode-foundations-title.png">
:   </a>
:  </div>
: </p>

* Component health monitoring
* Static code analysis
* Documentation of --depot-user and --depot-auto-update
* Minor adjustments in the under-the-hood chapter
* Changes of the build system
* Updated tool requirements
* Updated API reference

: <div class="visualClear"><!-- --></div>

To examine the changes in detail, please refer to the book's
[https://github.com/nfeske/genode-manual/commits/master - revision history].

New online version of the book
------------------------------

We are happy to report that the Genode Foundations book is now available
as an online version in addition to the regular PDF version.

:Browse the Genode Foundations book online:

  [http://genode.org/documentation/genode-foundations/18-05/index.html]

Thanks to Edgard Schmidt for creating the tooling for the HTML version of
the book!


Base framework and OS-level infrastructure
##########################################

Modernized block-storage interfaces
===================================

; @nfeske

commit 2208220c12347ca68fe52498077e6a95a9945096
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Apr 3 16:05:10 2019 +0200

    block session: remove Block::Session::Operations
    
    This patch modernizes the 'Block::Session::info' interface. Instead of
    using out parameters, the 'init' RPC function returns a compound 'Info'
    object now. The rather complicated 'Operations' struct is replaced by
    a 'writeable' attribute in the 'Info' object.
    
    Fixes #3275

commit bbe3ee8dc5852c7f95f1b7d1e84654199d778a51
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Thu Apr 4 18:25:54 2019 +0200

    block_session: server-defined payload alignment
    
    This patch replaces the formerly fixed 2 KiB data alignment within the
    packet-stream buffer by a server-defined alignment. This has two
    benefits.
    
    First, when using block servers that provide small block sizes like 512
    bytes, we avoid fragmenting the packet-stream buffer, which occurs when
    aligning 512-byte requests at 2 KiB boundaries. This reduces meta data
    costs for the packet-stream allocator and also allows fitting more
    requests into the buffer.
    
    Second, block drivers with alignment constraints dictated by the
    hardware can now pass those constraints to the client, thereby easing
    the use of zero-copy DMA directly into the packet stream.
    
    The alignment is determined by the Block::Session_client at construction
    time and applied by the Block::Session_client::alloc_packet method.
    Block-session clients should always use this method, not the 'alloc_packet'
    method of the packet stream (tx source) directly. The latter merely
    applies a default alignment of 2 KiB.
    
    At the server side, the alignment is automatically checked by
    block/component.h (old API) and block/request_stream.h (new API).
    
    Issue #3274

commit 34fd5f626a5e57ff87295d7b689497d062d22206
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Fri Apr 5 09:12:27 2019 +0200

    test/block_request_stream: private Request_stream
    
    Avoid public inheritance to make the code simpler to understand.
    
    Issue #3279

commit 51f51c18afcd698ad866225ca97085ccc75c1940
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Fri Apr 5 09:16:28 2019 +0200

    block/request_stream: rename wakeup_client
    
    This patch renames 'wakeup_client' to 'wakeup_client_if_needed' to
    clarify that the method triggers signals only when needed, not on every
    call.
    
    The name 'wakeup_client' is prone to misguide users to call the function
    conditionally as an optimization, thereby complicating the code, but to
    no effect.
    
    Fixes #3279

commit a39474a245c545ac0fb858a6daa5773d1d13a186
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Apr 9 16:24:12 2019 +0200

    block-request stream: split Operation from Request
    
    This patch splits the 'Request' definition into smaller types that are
    suitable for the client-side API too.
    
    The new 'Operation' type comprises the block operation's type (opcode)
    and the operation's arguments (block number, block count).
    The former 'Request::operation_defined' is now 'Operation::valid'.
    The 'Request' aggregates an 'Operation', which changes its object
    layout.
    
    Note that this commit relaxes the bit-precise definition of 'Request' to
    facilitate the use of 'unsigned long' where appropriate, in particular
    for the request tag (which should correspond to an 'Id_space::Id'). The
    originally bit-precise definition was pursued to allow the sharing of
    the 'Request' type between SPARK and C++ code. However, it turns out
    that defining a native type in each language and a (set of) converting
    constructors is a more natural approach.
    
    Issue #3283

commit e058adc4fec329cc733afc78de9f27b6f38253e7
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Apr 9 13:58:49 2019 +0200

    block_session: add client-defined request tag
    
    The new request tag allows a block-session client to uniquely correlate
    acknowledgements with outstanding requests. Until now, this was possible
    for read and write operations by taking the value of the request's
    packet-stream offset. However, SYNC and TRIM requests do not carry any
    packet-stream payload and thereby lack meaningful offset values. By
    introducing the notion of a 'tag', we can support multiple outstanding
    requests of any type and don't need to overload the meaning of the
    'offset' value.
    
    Issue #3274

commit 593e97112185e3804d0a59241e77bf16c3632b72
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Apr 9 10:52:01 2019 +0200

    block_session: SYNC and TRIM as async operations
    
    This patch removes the blocking Block::Session::sync RPC function and
    adds the asynchronous operations SYNC and TRIM to the block session's
    packet-stream interface.
    
    Even though the patch adjusts all block components to the interface
    change, the components keep the former blocking handling of sync
    internally for now because of the design of the 'Block::Driver'
    interface. This old interface is not worth changing. We should instead
    migrate the block servers step by step to the new
    'Block::Request_stream' API.
    
    Fixes #3274

commit c433f870002738e1a01604d82eb7a182c46f119e
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Apr 10 22:16:31 2019 +0200

    os: batching of packet-stream source operations
    
    This patch adds support for manually triggering the wakeup of the packet
    sink by the source. This way, a packet source becomes able to marshal
    batches of submissions or unmarshal batches of acknowledgements before
    yielding the control over to the sink.
    
    Issue #3283

commit 6c0dd9fe3bfb5b8f01c7a43efa9cafe7819fc716
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Apr 9 17:43:30 2019 +0200

    block_session: use types from block/request.h
    
    Issue #3283

commit e5f27b44b54c6311d940d9906880d828ba9281ea
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Apr 10 20:11:18 2019 +0200

    block_session: turn 'Connection' into template
    
    As a preparatory step for introducing the new block-client API, we have
    to turn the 'Block::Connection' into a class template. The template
    argument will be used to tie an application-defined job type to the
    block connection.
    
    Issue #3283

commit 976f67eee63b4925f001608151343f14a2b83f00
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Thu Apr 11 21:37:53 2019 +0200

    os: make 'Block::Operation' printable
    
    Issue #3283

commit 784206c85ccfb89915a9cd0fa60c78c3a6aa6c12
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Apr 10 15:07:16 2019 +0200

    block_session: new client-side API
    
    This patch equips the 'Block::Connection' with a framework API for the
    implementation of robust block-session clients that perform block I/O in
    an asynchronous fashion.
    
    An application-defined 'JOB' type, inherited from 'Connection::Job',
    encapsulates the application's context information associated with a
    block operation.
    
    The lifecycle of the jobs is implemented by the 'Connection' and driven
    by the application's invokation of 'Connection::update_jobs'. The
    'update_jobs' mechanism takes three hook functions as arguments, which
    implement the applications-defined policy for producing and consuming
    data, and for the completion of jobs.
    
    Issue #3283

commit 17fda73ca1fd617a350991aad29b0bc8bf4caa34
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Thu Apr 11 21:36:28 2019 +0200

    block_tester: update to new block-client API
    
    - Added 'io_buffer' attribute, default is 4M
    - Added 'batch' attribute, specifying the number of jobs used
      in parallel, default is 1 (sequential)
    - Removed 'synchronous' attribute (use batch of 1 instead)
    - Added 'copy' attribute (default "yes")
    - Print number of signals ("triggered")
    
    Issue #3283


Unified types for time values
=============================

[https://genode.org/documentation/release-notes/17.05#New_API_for_user-level_timing - Two years ago]

we introduced the so-called timeout framework to provide a general solution for
requirements unmet by the bare timer-session interface - most notably
timer-session multiplexing amongst multiple timeouts and microseconds accuracy.
Up to this day, the timeout framework has proved itself many times in both
real-life appliances and artifical tests and has become the standard front end
for timing in Genode applications.

With this release, we solved one of the few remaining limitations with the
framework by enabling timeouts of up to 2^64 microseconds (> 500000 years)
across all supported architectures. In order to achieve this, we replaced the
former machine-word-wide types used for plain time values by unsigned 64-bit
integers. We did this not only inside the timeout framework but
also to almost all code in the basic Genode repositories that uses the
framework.

By doing so, we also paved the way for a second step in which we are planning
to replace plain time values as far as possible with the abstract 'Duration'
type. With this in place, the user wouldn't have to worry anymore about any
plain-integer implications when calculating with time values.


Support for chained EBR partitions
==================================

; @cnuke

commit cb2ebd0bf7e940f43d835d7517a3556f59580c0f
Author: Josef Söntgen <josef.soentgen@genode-labs.com>
Date:   Sun Mar 10 14:36:07 2019 +0100

    part_block: fix handling of chained EBR's
    
    Fixes #3223.


IP forwarding with port redirection
===================================

The NIC router can now be used to redirect to individual destination ports on
port-forwarding. To express this, the new 'to_port' attritbute can be added to
'<tcp-forward>' and '<udp-forward>' rules in the NIC router configuration. If
the new attribute isn't added, the rules behave as usual and forward with an
unaltered destination port.

; NIC-bridge support for ethernet multicast
; =========================================
; @ehmry - just a small fix, I would not mention it


Libraries, languages, and applications
######################################

Ada/SPARK runtime and SPARK-based cryptography
==============================================

The SPARK runtime has been updated to GCC 8.3. SPARK components do not
require 'Genode::Env' or a terminal session anymore. Debug message can still be
printed using 'GNAT.IO', which uses 'Genode::log' and 'Genode::error'
internally now.

Threading support, which was never fully implemented, has been removed
to further simplify the runtime. This simplification allowed us to prove
absence of runtime errors for the secondary stack allocator and other parts of
the runtime.

[https://github.com/Componolit/libsparkcrypto.git - Libsparkcrypto] is a
library of common cryptographic algorithms implemented in SPARK. It is
free-standing and has a very small footprint. The port of libsparkcrypto
for Genode has been added to the libports repository.
Thanks to Alexander Senier and Johannes Kliemann of
[https://componolit.com - Componolit] for maintaining the Ada/SPARK runtime
and libsparkcrypto.

To accommodate the use case of block encryption, we added the small wrapper
library 'aes_cbc_4k' around libsparkcrypto that provides a simple C++
interface for the en/decryption of 4 KiB data blocks. It uses AES-CBC while
incorporating the block number and the private key as salt values.


Improved resilience of sequence tool
====================================

; @cnuke

commit dd6bd0f880d6b0f2a3f925f5aed59d96cfef2f95
Author: Josef Söntgen <josef.soentgen@genode-labs.com>
Date:   Tue May 7 13:25:06 2019 +0200

    sequence: add keep-going feature
    
    When enabling the 'keep_going' config attribute, the component will
    carry on in case a child exited with an error. In addition, if the
    'restart' attribute is set it will start executing the children from
    the beginning.


NIC-bus server for private LANs
===============================

The 'nic_bus' server was added to the world repository as an alternative
to the 'nic_router' and 'nic_bridge' components. The name may be slight
misnomer, but this component acts neither as a hub, switch, or router.
The 'nic_bus' implements unicast and multicast Ethernet packet switching
between sessions, but drops any unicast packet not destined for a session
attached to the bus. This is in opposition to the behavior of a typical
Ethernet switch and is intending to create simple, software-defined
local-area-networks for native components as well as virtual machines.
In practice the component has been used for attaching VMs to the
[https://yggdrasil-network.github.io/ - Yggdrasil] overlay network via
a bus-local IPv6 prefix.


Distributed Genode
==================

In
[https://genode.org/documentation/release-notes/16.08#Network-transparent_ROM_sessions_to_a_remote_Genode_system - 16.08],
we initially released the _remote_rom_ components that act as
communication proxies. A communication proxy transparently relays a particular
service to another Genode system. As the name suggests, the remote_rom relays
ROM sessions.

Originally implemented as a proof of concept using bare IP packets, broadcast
MACs and static configuration of IP addresses, we added several improvements
to allow a more general use. First, we adopted the size-guard idea for packet
construction and processing from the NIC router. We further picked up the
single-threaded implementation style that was already established in other NIC
components. Thanks to Edgard Schmidt for this contribution. Second, we
implemented ARP requests to eliminate broadcasting. Third, we moved from bare
IP packets to UDP/IP and implemented a go-back-N ARQ strategy in order to
reliably transmit larger ROM dataspaces.

As the remote_rom proved valuable for distributing functionality across
multiple Genode devices, we also applied this concept to the LOG session in
order to transmit LOG output from a headless Genode device to a Sculpt system
for instance. The udp_log component provides a LOG service and sends the LOG
messages as UDP packets to another machine. The log_udp reverses this process by
receiving these UDP packets and forwarding the messages to a LOG service. An
example can be found in the world repository at _run/udp_log.run_ and
_run/log_udp.run_.


Seoul virtual-machine monitor
=============================

Besides the conversion of the Genode backend of Seoul to the new VM interface,
we added mouse-wheel support to the PS/2 model and changed the VMM to request
a GUI/nitpicker session instead of a framebufer and an input session
separately.


VirtualBox
==========

Similar to the Seoul VMM, the VirtualBox VMM got adjusted to the new VM
interface and now uses the GUI/nitpicker session. The original kernel-agnostic
VirtualBox version tied to the NOVA kernel is still available. Both versions
can be used simultaneously.


; Solo5
; =====
; @ehmry - just API updates, no new features or behavior


Use of Nim decoupled from Genode build system
=============================================

With this release all integration with Nim tooling has been removed
from the Genode build system as a result of maturing support for
additional languages via Genode SDKs. Building Nim components
independently of the Genode source tree has the benefit of smaller
upstream checkouts and faster build times, and has yielded components
such as the [http://genodians.org/ehmry/2019-03-22-depot_9P - 9P server]
used in some Sculpt developer workflows. An example of an independent
build system for nim components is
[http://genodians.org/ehmry/2019-04-27-nim_packaging - documented on the Genodians blog].


OpenJDK improvements
====================

Within the 19.05 release cycle we further improved Genode's OpenJDK support by
enabling additional networking infrastructure required by the
[https://spring.io - Spring Framework]. The improvements  especially concern
support for SSL connections which enabled us to successfully execute an embedded
[https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-web-servers.html - Tomcat]
server natively on Genode x86 and ARMv7 platforms using the same JAR archive.
This line of work continues our Java for embedded systems effort as described in
our [http://genodians.org/ssumpf/2019-02-27-java-19-02 - Boot2Java] article.

Having these features in place, our Java efforts will continue in the direction
of Java Swing and the support of input devices in the future, with the ultimate
goal of seamless Java application integration into Sculpt OS.


Device drivers
##############

Improved Zynq board support
===========================

The initial support of the Xilinx Zynq-7000 SoC was added to our custom kernel
in 15.11. Since then, the support of this hardware has been incrementally
extended. The definitions of memory maps, frequencies, and RAM sizes for
different Zynq-based boards is found in the world repository.

One of the major additions in this release is the initialization of the L2
cache. In this context, we also added a simple cache benchmark at
_repos/os/run/cache.run_ that measures the access times for memory regions of
different size and thereby reveals the number of cache levels and their sizes.

With the latest improvements of the network driver in 18.11, a zero-copy
approach was introduced as an effort to eliminate bottlenecks in the driver's
performance.  However, this modification also introduced a kernel dependency of
the driver in order to flush packet-buffer memory from the cache before handing
it over to the DMA-controller. With this release, we moved back to using
uncached dataspaces in order to eliminate the cache flushes and the kernel
dependency. Interestingly, we could not recognize a significant impact on the
driver's performance, which confirms the presumption that flushing the cache
nullifies the gain from using cached dataspaces.

In order to enable the continuous operation of the network driver, we extended
the driver-internal error handling that is necessary to recover the network
driver in certain situations.

_Thanks to Johannes Schlatow for Genode's Zynq support!_


Updated Intel network drivers
=============================

; @chelmuth

commit 1cc3472e1dec472faf4f91ae1789183026ccff6c
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Sun Mar 3 14:49:11 2019 +0100

    dde_ipxe: enable Intel i211 network card
    
    Fixes #3201

commit 4f0b17a4dc61626592933d6ad72aed58d5f1ef10
Author: Christian Helmuth <christian.helmuth@genode-labs.com>
Date:   Thu May 2 15:18:12 2019 +0200

    dde_ipxe: update Intel NIC driver to latest upstream
    
    This patch is motivated by sporadic hangs during link down/up on i219
    NICs handling and the fix implemented upstream in
    
      https://git.ipxe.org/ipxe.git/commit/546dd51de8459d4d09958891f426fa2c73ff090d
    
    Issue #1220


New drivers-nic depot packages
==============================

; @skalk

commit 5b5e8a9bd43078e340eed85925591a093cb7ef96
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Apr 24 16:03:16 2019 +0200

    depot: add recipe for drivers_nic-linux
    
    Ref #3180

commit ff031d792c3a3d4b574b1ac76cc445d4701aa29f
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Apr 23 11:10:12 2019 +0200

    depot: add recipe for driver_nic-rpi
    
    Ref #3180

commit 82693ba5b557b87acd56683477e4b619713bb38b
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Apr 17 11:33:44 2019 +0200

    depot: add recipe for drivers_nic-imx53_qsb
    
    Ref #3180

commit 8dd618d67f202f8db124255d2a4aaec8219815ed
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Apr 17 11:40:42 2019 +0200

    depot: add recipe for drivers_nic-imx6q_sabrelite
    
    Ref #3180

commit 5182224c2b683319e1e9ac756e947907fa9f335f
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Mon Apr 15 15:22:04 2019 +0200

    depot: add recipe for drivers_nic-zynq
    
    Ref #3180

commit 5d4064fed413e2efc59d8ed34fd2b81cfec4f254
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Fri Apr 12 20:07:22 2019 +0200

    depot: add recipe for drivers_nic-pbxa9
    
    Ref #3180

commit ae3a6fe27093db3bd0c828941944e215bc331385
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue May 7 13:39:15 2019 +0200

    depot: add recipe for drivers_nic-muen pkg


Extended drivers-interactive depot packages
===========================================

; @skalk

commit a623a66019c795d6b9762989e045664ed711fb18
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Fri May 3 15:26:44 2019 +0200

    depot: add recipe for drivers_interactive-imx53_qsb
    
    Ref #2190

commit e6f83d4df23b90067de1a4fa4701ff5fbdcca23b
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Fri May 3 15:47:48 2019 +0200

    depot: add recipe for drivers_interactive-rpi
    
    Ref #2190

commit be053ed257de33f1e9355b7c7c1ada31cbc8b4f8
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue May 7 13:45:57 2019 +0200

    depot: add recipe for drivers_interactive-muen


Platforms
#########

; @skalk

commit f42c21f16bb14da937ba6aa3c4658ef0cbebab90
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Apr 17 12:51:39 2019 +0200

    platform_info: add kernel information (fix #3295)


Execution on bare hardware (base-hw)
====================================

; @skalk

commit 2ecf1d887b44c8d5874cf97cd1dbe78886030a73
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Feb 20 15:26:56 2019 +0100

    hw: schedule on demand (Fix #3157)

commit 80fa23da5e95b83fec241958e6086e903052bea0
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu Feb 21 17:23:10 2019 +0100

    hw: increase timing accuracy of kernel (fix #3081)
    
    * Introduce 64-bit tick counter
    * Let the timer always count when possible, also if it already fired
    * Simplify the kernel syscall API to have one current time call,
      which returns the elapsed microseconds since boot

commit 330692350eafffd44e2338d09869980f9286e03c
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Mon Mar 11 11:42:36 2019 +0100

    hw: introduce non-blocking signal checking
    
    * Introduces pending_signal syscall to check for new signals for the
      calling thread without blocking
    * Implements pending_signal in the base-library specific for hw to use the
      new syscall
    
    Fix #3217

commit e9b3569f441523ef2aadff909ac21baa40eadc18
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Mar 13 15:43:56 2019 +0100

    hw: remove overall cache maintainance from core
    
    This functionality is only needed in bootstrap now that kernel and
    userland share the same address-space.
    
    Fix #2699

commit b04a70177b0ec20371a915805a34db242fc273be
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Thu Nov 13 13:41:15 2014 +0100

    base & arm: simplify and optimize cmpxchg
    
    The old inline assembly provided two output operands that were afterwards
    combined for a return value. However, the second output operand isn't
    necessary when using the "Acquiring a Lock" example-code of the ARM manual
    "Barrier Litmus Tests and Cookbook". This saves two logical operations
    per acquisition try. Additionally better documentation is now provided.
    
    Fixes #1292

commit 3725e91603cf322fecc234278ded7ac2be85836e
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Mar 13 14:58:23 2019 +0100

    hw: implement power-saving kernel lock for ARM smp
    
    Thanks to former work of Martin Stein this commit finally incorporates a
    non-spinning kernel lock on multi-core ARM platforms.
    
    Fix #1313

commit baf815d09986a15d72224a418503919c36d7a986
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Fri Mar 22 14:23:07 2019 +0100

    hw: add support for i.MX7 Dual SABRE board
    
    Fix #3251

commit 1ac3c845faadfb50700a024baa625ac14d11aaab
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu May 16 13:42:46 2019 +0200

    hw: unify board definitions of bootstrap/core
    
    Ref #3326

commit 70ff19dc5455f45ca30c8031e8eba9343418a066
Author: Sebastian Sumpf <sebastian.sumpf@genode-labs.com>
Date:   Thu May 23 18:09:42 2019 +0200

    hw: eager FPU switching for x86_64
    
    Since gcc 8.3.0 generates SSE instructions into kernel code, the
    kernel itself may raise FPU exceptions and/or corrupt user level FPU
    contexts thereby. Both things are not feasible, and therefore, lazy FPU
    switching becomes a no go for base-hw because we cannot avoid FPU
    instructions because of the entanglement of base-hw, base, and the tool
    chain (libgcc_eh.a).
    
    issue #3365


Updated Muen separation kernel
==============================

; @codelabs

commit 92df79b4de635152e20a80e4787338a702de0d67
Author: Adrian-Ken Rueegsegger <ken@codelabs.ch>
Date:   Mon May 6 15:02:17 2019 +0200

    Update Muen port
    
    - Drop unnecessary patch
    - Improved build speed/parallelization
    - Increased log channel size
    - Fix path in base-hw/Muen documentation


NOVA microhypervisor
====================

The kernel got updated due to the tool-chain update to
GNU G++ 8.3.0. Additionally, several issues reported by Julian Stecklina
regarding FPU and page-table synchronization got addressed. The kernel memory
allocation at boot time got more flexible to address target machines with
fragmented physical memory. Additionally, the vTLB implementation is no
longer used on AMD machines whenever nested paging is available.


seL4 microkernel
================

; @skalk

commit 3d727a403fb39c72a76ac896df6e9c056a424178
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Mon Jan 21 13:55:15 2019 +0100

    sel4: update tools to currently used version 9.0.x
    
    Until now, Genode referenced a fork of the outdated elfloader-tool
    to enable bootstrapping of sel4 on ARM platforms. Because the
    elfloader is inherently dependent on the used platforms newer
    ARM versions supported by the kernel could not be loaded by the
    outdated elfloader. This commit uses a fresh fork of the nowadays
    used sel4_tools repository.
    
    Ref #3251

commit 4c492a3be760928950ddf8b94ccc3e3c8b266b61
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Mon Jan 21 14:21:19 2019 +0100

    imx7d_sabre: add board for sel4 and foc
    
    Ref #3251

commit 95b9e0a0e2dde44f35048ab63789d28cf362ad2d
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Apr 16 10:26:56 2019 +0200

    sel4: fix configuration for imx7d sabre
    
    Ref #3292

commit 4bcd9169c0098b10ae295e46e048a8df3df0136f
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Apr 16 13:21:31 2019 +0200

    sel4: add timer for imx7d_sabre
    
    Fix #3292


Fiasco.OC microkernel
=====================

; @skalk

commit 356526d61058d52bc1f66a8e0aac426dc9c3c411
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Tue Apr 2 11:39:26 2019 +0200

    foc: increase USER_BASE_CAP
    
    due to THREAD_AREA_SLOT increase by
    
    foc/x86: implement vm_session interface
    
    Add additional static assertion check to detect misconfiguration earlier.

commit 71c36e79e30a0b7e4b83e5855ed720825ce31df4
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Fri Mar 29 11:08:06 2019 +0100

    foc: add support for Raspberry Pi 3
    
    Ref #3260


Tooling and build system
########################

Improved handling of missing ports
==================================

The depot tools 'tool/depot/create' and 'tool/depot/extract' now detect and
report all missing third-party sources - called ports - for a given set of
archives at once. Additionally, the user can tell the tools to download and
prepare such missing ports automatically by setting the environment variable
'PREPARE_PORTS' to '1' (Please be aware that doing so may cause downloads and
file operations in your 'contrib' directory without further interaction). These
features make building archives with dependencies to many ports more enjoyable.
If you merely need a list of ports that are missing for your archives, you can
use the new tool 'tool/depot/missing_ports'.

For more details you may read the
[http://www.genodians.org/m-stein/2019-05-21-depot-missing-ports - article on genodians.org] .


Automated depot management
==========================

When using the 'import_from_depot' mechanism of the run tool, one frequently
encounters a situation where the depot lacks a particular archive.
Whenever the run tool detects such a situation, it prompts the user to
manually curate the depot content via the _tool/depot/create_ tool.
The need for such manual steps negatively interferes with the development
workflow. The right manual steps are sometimes not straight-forward to find,
in particular after switching between Git branches.

To relieve the developer from this uncreative manual labor, we extended the
run tool with the option '--depot-auto-update' for managing the depot
automatically according to the needs of the executed run script. To enable
this option, use the following line in the build configuration:

! RUN_OPT += --depot-auto-update

If enabled, the run tool automatically invokes the right
depot-management commands to populate the depot with the required archives,
and to ensure the consistency of the depot content with the current version of
the source tree. The feature comes at the price of a delay when executing the
run script because the consistency check involves the extraction of all used
source archives from the source tree. In regular run scripts, this delay
is barely noticeable. Only when working with a run script of a large system,
it may be better to leave the depot auto update disabled.

Please note that the use of the automated depot update may result in version
updates of the corresponding depot recipes in the source tree (recipe hash
files). It is a good practice to review and commit those hash files once the
local changes in the source tree have reached a good shape.

